get:
  summary: List Courses
  operationId: listCourses
  description: List courses according to the given query
  tags:
    - courses
  parameters:
    - name: chiefProfessor
      in: query
      required: false
      schema:
        type: string
  responses:
    '200':
      description: An array of courses
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "../../schemas/Course.yaml"
    default:
      $ref: "../../responses/UnexpectedError.yaml"
post:
  summary: Create Course
  description: |
    Register a `Course` to the system by supplying its `code`, `title`, `theme`, `deputyProfessors`. The current authenticated user will be the `chiefProfessor`, who must have the required authority. A created course will be returned whose `experts` and `students` remain unspecified.
    
    Possible Client-side Exceptions:
      * Invalid arguments
      * `courseID` clash
      * No authority
        * user is not a professor
  operationId: createCourse
  tags:
    - courses
  requestBody:
    required: true
    content:
      application/json:
        schema:
          $ref: "../../schemas/Course.yaml"
  responses:
    '201':
      description: The created course
      content:
        application/json:
          schema:
            $ref: "../../schemas/Course.yaml"
    default:
      $ref : "../../responses/UnexpectedError.yaml"
