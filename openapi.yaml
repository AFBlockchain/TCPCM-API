openapi: 3.0.0
info:
  version: 1.0.0
  title: TCPCM
  description: REST API for TCPCM
  license:
    name: MIT
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
servers:
  - url: 'http://10.13.46.31:8888'
paths:
  /courses:
    get:
      summary: List Courses
      operationId: listCourses
      description: List courses according to the given query
      tags:
        - courses
      parameters:
        - name: chiefProfessor
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create Course
      description: |
        Register a `Course` to the system by supplying its `code`, `title`, `theme`, `deputyProfessors`. The current authenticated user will be the `chiefProfessor`, who must have the required authority. A created course will be returned whose `experts` and `students` remain unspecified.

        Possible Client-side Exceptions:
          * Invalid arguments
          * `courseID` clash
          * No authority
            * user is not a professor
      operationId: createCourse
      tags:
        - courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: The created course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/courses/{courseId}':
    get:
      summary: Course Detail
      operationId: getCourseById
      description: Information for a specific course
      tags:
        - courses
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Update a course
      operationId: updateCourses
      description: |
        Possible updates:
          1. Link accounts: specify `experts` and `students`
          2. Update the course reprot by professor
      tags:
        - courses
      parameters:
        - name: courseId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '200':
          description: The updated course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /course-records/:
    get:
      summary: List Course Records
      operationId: listCourseRecords
      description: List course records according to the given query
      tags:
        - courses
      parameters:
        - name: courseId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of course records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1course-records~1/patch/responses/200/content/application~1json/schema'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Grade Courses
      operationId: gradeCourses
      description: Grade course records in batch size.
      tags:
        - courses
      parameters:
        - in: query
          name: courseId
          schema:
            type: string
          required: true
          description: The course under grading.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1quiz-records~1/patch/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: The list of graded course records.
          content:
            application/json:
              schema:
                title: CourseRecord
                description: The record for the overall course performance.
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: A unique identifier
                  courseID:
                    type: string
                  student:
                    $ref: '#/components/schemas/QuizRecord/properties/student'
                  grade:
                    type: string
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/course-records/{courseRecordID}':
    get:
      summary: Course Record Detail
      operationId: getCourseRecordByID
      description: Information for a specific course record.
      tags:
        - courses
      parameters:
        - name: courseRecordID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested course record.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1course-records~1/patch/responses/200/content/application~1json/schema'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /groups:
    get:
      summary: List Groups
      operationId: listGroups
      description: List groups according to the given query
      tags:
        - groups
      parameters:
        - name: courseId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of groups
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create Groups
      operationId: createGroups
      tags:
        - groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: The created Group
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/groups/{groupId}':
    get:
      summary: Group Detail
      operationId: getGroupById
      description: Information for a group
      tags:
        - groups
      parameters:
        - name: groupId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /projects:
    get:
      summary: List Projects
      operationId: listProjects
      description: |
        List projects according to the given query. Available queries:
          1. By courseId
      tags:
        - projects
      parameters:
        - name: courseId
          in: query
          required: false
          schema:
            type: string
        - name: professor
          in: query
          required: false
          description: professor email
          schema:
            type: string
      responses:
        '200':
          description: An array of projects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create Project
      operationId: createProject
      description: |
        Register a project under the given course by supplying `courseID`, `title` and `description`. Return the created project.

        This operation SHOULD only be carried out after the professor has properly linked students and experts to a course(class), so that in the backend the participation information can be properly propagated to the created project.

        Exceptions:
          * No authority
          * Course not found
          * Invalid arguments
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: The created project (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /project-records:
    get:
      summary: List Project Records
      operationId: listProjectRecords
      description: |
        List project records according to the given query. Notice that only `groupID` is fetched (without `groupName`, which needs another query).
      tags:
        - projects
      parameters:
        - name: projectId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of project records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Grade Projects
      operationId: gradeProjects
      description: |
        Grade projects in batch. The `grader` is the current user. Only `chiefProfessor` of the course and a `ProjectRecord`'s industry supervisor can grade a project.
      tags:
        - projects
      parameters:
        - name: projectId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1quiz-records~1/patch/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: a list of graded `ProjectRecord`s
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/project-records/{projectRecordID}':
    get:
      summary: Project Record Detail
      operationId: getProjectRecordByID
      description: Information for a specific project record
      tags:
        - projects
      parameters:
        - name: projectRecordID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the `ProjectRecord`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /quizzes:
    get:
      summary: List Quizzes
      operationId: listQuizzes
      description: List quizzes according to the given query
      tags:
        - quizzes
      parameters:
        - name: courseId
          in: query
          required: false
          schema:
            type: string
        - name: professor
          in: query
          required: false
          description: professor email
          schema:
            type: string
      responses:
        '200':
          description: An array of quizzes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create Quiz
      operationId: createQuiz
      description: |
        Register a quiz under the given course by supplying `courseID`, `title` and `description`. Return the created quiz.

        This operation SHOULD only be carried out after the professor has properly linked students and experts to a course(class), so that in the backend the participation information can be properly propagated to the created quiz.

        This call also automatically creates all "record"s for every student in this course.

        Exceptions:
          * No authority
          * Course not found
          * Invalid arguments
      tags:
        - quizzes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '201':
          description: The created quiz (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/quizzes/{quizID}':
    get:
      summary: Quiz Detail
      operationId: getQuizById
      description: Information for a specific quiz
      tags:
        - quizzes
      parameters:
        - name: quizID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /quiz-records/:
    get:
      summary: List Quiz Records
      operationId: listQuizRecords
      description: List quiz records according to the given query
      tags:
        - quizzes
      parameters:
        - name: quizId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of quiz records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Grade Quizzes
      operationId: gradeQuizzes
      description: Grade quiz records in batch size.
      tags:
        - quizzes
      parameters:
        - name: quizId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  grade:
                    type: string
      responses:
        '200':
          description: The list of graded quiz records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/quiz-records/{quizRecordId}':
    get:
      summary: Quiz Record Detail
      operationId: getQuizRecordByID
      description: Information for a specific quiz record
      tags:
        - quizzes
      parameters:
        - name: quizRecordId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /reports/:
    get:
      summary: List Reports
      operationId: listReports
      description: List reports according to the given query
      tags:
        - reports
      parameters:
        - name: courseId
          in: query
          required: false
          schema:
            type: string
        - name: professor
          in: query
          required: false
          description: professor email
          schema:
            type: string
      responses:
        '200':
          description: An array of reports
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create Report
      operationId: createReport
      description: |
        Register a quiz under the given course by supplying `courseID`, `title` and `description`. Return the created report.

        This operation SHOULD only be carried out after the professor has properly linked students and experts to a course(class), so that in the backend the participation information can be properly propagated to the created report.

        This call also automatically creates all "record"s for every student in this course.

        Exceptions:
          * No authority
          * Course not found
          * Invalid arguments
      tags:
        - reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        '201':
          description: The created report (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /report-records/:
    get:
      summary: List Report Records
      operationId: listReportRecords
      description: List report records according to the given query
      tags:
        - reports
      parameters:
        - name: reportId
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of report records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Grade Reports
      operationId: gradeReports
      description: Grade report records in batch size.
      tags:
        - reports
      parameters:
        - name: reportId
          in: query
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/paths/~1quiz-records~1/patch/requestBody/content/application~1json/schema'
      responses:
        '200':
          description: The list of graded report records.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/report-records/{reportRecordId}':
    get:
      summary: Report Record Detail
      operationId: getReportRecordByID
      description: Information for a specific report record.
      tags:
        - reports
      parameters:
        - name: reportRecordId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested report record.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReportRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /milestone/:
    post:
      summary: Create Milestone
      operationId: createMilestone
      description: Create a milestone
      tags:
        - milestones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
      responses:
        '201':
          description: The created milestone (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /badge/classes:
    post:
      summary: Create Badge Class
      operationId: createBadgeClass
      tags:
        - badges
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: BadgeClass
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                name:
                  type: string
                description:
                  type: string
                type:
                  type: string
                  enum:
                    - COURSE
                    - QUIZ
                    - REPORT
                    - PROJECT
                subjectId:
                  type: string
                threshHold:
                  type: string
                onChainId:
                  type: string
                creator:
                  title: User
                  description: TCPCM Users
                  type: object
                  properties:
                    email:
                      type: string
                    name:
                      description: User's real name
                      type: string
                    password:
                      type: string
      responses:
        '201':
          description: The created BadgeClass
          content:
            application/json:
              schema:
                $ref: '#/paths/~1badge~1classes/post/requestBody/content/application~1json/schema'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      summary: List Badge Classes
      operationId: listBadgeClasses
      tags:
        - badges
      parameters:
        - name: creator
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: a list of BadgeClass
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1badge~1classes/post/requestBody/content/application~1json/schema'
  '/badge/classes/{badgeClassId}':
    get:
      summary: Get Badge Class
      operationId: getBadgeClassById
      description: Information for a specific Badge Class
      tags:
        - badges
      parameters:
        - name: badgeClassId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested BadgeClass.
          content:
            application/json:
              schema:
                $ref: '#/paths/~1badge~1classes/post/requestBody/content/application~1json/schema'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /badge/assertions:
    post:
      summary: Issue Assertions
      operationId: issueAssertions
      tags:
        - badges
      parameters:
        - name: badgeClassId
          in: query
          required: false
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: Issued assertions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1badge~1classes/post/requestBody/content/application~1json/schema'
        default:
          $ref: '#/components/responses/UnexpectedError'
    get:
      summary: List Assertions
      operationId: listAssertions
      tags:
        - badges
      parameters:
        - name: issuer
          in: query
          required: false
          schema:
            type: string
        - name: recipient
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: a list of Assertions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/paths/~1badge~1assertions~1%7BassertionId%7D/get/responses/200/content/application~1json/schema'
  '/badge/assertions/{assertionId}':
    get:
      summary: Get Assertion
      operationId: getAssertionById
      description: Information for a specific Assertion
      tags:
        - badges
      parameters:
        - name: assertionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The requested Assertion
          content:
            application/json:
              schema:
                title: BadgeClass
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  badgeClassId:
                    type: integer
                    format: int64
                  onChainId:
                    type: string
                  issuer:
                    $ref: '#/paths/~1badge~1classes/post/requestBody/content/application~1json/schema/properties/creator'
                  recipient:
                    $ref: '#/paths/~1badge~1classes/post/requestBody/content/application~1json/schema/properties/creator'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /test/public:
    get:
      summary: Ping Public
      operationId: pingPublic
      description: Testing connection by pinging a *public* endpoint.
      tags:
        - test
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Successfully accessed public endpoint
  /test/private:
    get:
      summary: Ping Private
      operationId: pingPrivate
      description: Testing connection by pinging a *private* endpoint.
      tags:
        - test
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Successfully accessed private endpoint
        '401':
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              schema:
                type: string
      security:
        - basicAuth: []
  /pets:
    get:
      summary: List
      operationId: listPets
      description: List all pets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - name
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  tag:
                    type: string
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create
      operationId: createPets
      description: Create a pet
      tags:
        - pets
      responses:
        '201':
          $ref: '#/components/responses/NullResponse'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/pets/{petId}':
    get:
      summary: Detail
      operationId: showPetById
      description: Info for a specific pet
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/petId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/paths/~1pets/get/responses/200/content/application~1json/schema'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  parameters:
    petId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100)
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    Course:
      title: Course
      description: A TCPC Course
      type: object
      required:
        - code
        - theme
      properties:
        id:
          description: 'Unique identifier of a course across the platform. It is derived from the supplied `code` and `theme`. Later, `year` may also be incorporated.'
          type: string
        code:
          description: 'The subject code. For Capstone Course in AF, this is AF4912.'
          type: string
        theme:
          description: Course theme
          type: string
        report:
          description: Course report write by professor
          type: string
        professor:
          description: The user (professor who manages this course)
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
        experts:
          description: The industry experts sponsoring this course
          type: array
          items:
            $ref: '#/components/schemas/Group/properties/expert'
        students:
          description: The students taking this course
          type: array
          items:
            $ref: '#/components/schemas/QuizRecord/properties/student'
    Group:
      title: Group
      description: A group in a TCPC course
      type: object
      required:
        - courseId
        - name
        - notes
        - students
      properties:
        courseId:
          description: The TCPC course this group is under
          type: string
        id:
          description: Unique identifier of a group
          type: string
        name:
          description: Custom group name
          type: string
        notes:
          description: Miscellaneous information about the group
          type: string
        expert:
          type: object
          properties:
            name:
              type: string
            email:
              type: string
            password:
              type: string
        students:
          description: The students assigned to this group
          type: array
          items:
            $ref: '#/components/schemas/QuizRecord/properties/student'
    Project:
      title: Project
      description: A project in a TCPC course
      type: object
      required:
        - courseId
        - title
        - description
      properties:
        courseId:
          description: The ID of the TCPC course this project is under
          type: string
        id:
          description: 'Unique identifier of a project, derived from `courseID`.'
          type: string
        title:
          description: Project title
          type: string
        description:
          description: A short description of this project
          type: string
      example:
        courseId: AF4912BFBD
        id: AF4912BFBD-P1
        title: Blockchain Application for Small/Medium businesses
        description: Students are expected to form a group and come up with ideas for business transformation by the Blockchain Technology.
    ProjectRecord:
      title: ProjectRecord
      description: |
        A record for a TCPC project. A record is instantiated for every group for every project. A project is graded on a group basis. Grades (`gradeByProfessor`, `gradeByExpert`) will be `null` if not present.
      type: object
      properties:
        id:
          type: string
        projectId:
          type: string
        groupId:
          type: string
        gradeByProfessor:
          type: string
        gradeByExpert:
          type: string
    Quiz:
      title: Quiz
      description: A quiz in a TCPC course
      type: object
      required:
        - courseId
        - title
        - description
      properties:
        courseId:
          description: The ID of the TCPC course this quiz is under
          type: string
        id:
          description: 'Unique identifier of a quiz, derived from `courseId`.'
          type: string
        title:
          description: Quiz title
          type: string
        description:
          description: A short description of this quiz
          type: string
      example:
        courseId: AF4912BFBD
        id: AF4912BFBD-Q1
        title: Quiz 1
        description: First Quiz
    QuizRecord:
      title: QuizRecord
      description: |
        Graded record for a quiz. A record can only be graded by the course `chiefProfessor`.
      type: object
      properties:
        id:
          type: integer
          format: int64
        quizId:
          type: string
        student:
          type: object
          properties:
            name:
              type: string
            studentId:
              type: string
            email:
              type: string
            password:
              type: string
        grade:
          type: string
    Report:
      description: A Report in a TCPC course
      type: object
      required:
        - courseId
        - title
        - description
      properties:
        courseId:
          description: The ID of the TCPC course this report is under
          type: string
        id:
          description: 'Unique identifier of a project, derived from `courseID`.'
          type: string
        title:
          description: Report title
          type: string
        description:
          description: A short description of this report
          type: string
      example:
        courseId: AF4912BFBD
        id: AF4912BFBD-R1
        title: Report 1
        description: First Report
    ReportRecord:
      title: ReportRecord
      description: Gradable and uploadable record for a report
      type: object
      properties:
        id:
          type: integer
          format: int64
        reportId:
          type: string
          description: The `Report` this record is for.
        documentHash:
          description: The hash of the file for the student's report.
          type: string
        student:
          $ref: '#/components/schemas/QuizRecord/properties/student'
        grade:
          type: string
    Milestone:
      title: Milestone
      description: A milestone in a TCPC course
      type: object
      required:
        - courseID
        - title
        - description
        - chiefProfessor
      properties:
        courseID:
          description: The ID of the TCPC course this milestone is under
          type: string
        ID:
          description: 'Unique identifier of a milestone, derived from `courseID`.'
          type: string
        title:
          description: Milestone title
          type: string
        description:
          description: A short description of this milestone
          type: string
        chiefProfessor:
          description: The professor managing this class. Should be the same as the `chiefProfessor` from the parent `Course`.
          type: string
        students:
          description: 'The students assigned to this milestone, inherited from the course'
          type: array
          items:
            type: string
      example:
        courseID: AF4912BFBD
        ID: AF4912BFBD-M1
        title: Milestone 1
        description: First Milestone
        chiefProfessor: brian
        students:
          - alice
          - bob
  responses:
    UnexpectedError:
      description: Erroneous condition
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - code
              - message
            properties:
              status:
                description: HTTP response status
                type: integer
                format: int32
              code:
                description: a application-defined error code
                type: integer
                format: int32
              message:
                description: 'detailed error information, suitable to be displayed to user'
                type: string
            example:
              status: 422
              code: 179
              message: Object with id 'AF4912' already exists.
    NullResponse:
      description: Null response
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
