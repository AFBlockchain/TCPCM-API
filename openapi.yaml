openapi: 3.0.0
info:
  version: 1.0.0
  title: TCPCM
  description: REST API for TCPCM
  license:
    name: MIT
  contact:
    name: API Support
    url: 'http://www.example.com/support'
    email: support@example.com
servers:
  - url: 'http://ec2-54-165-183-53.compute-1.amazonaws.com:8080'
paths:
  /courses:
    get:
      summary: List Courses
      operationId: listCourses
      description: List courses according to the given query
      tags:
        - courses
      parameters:
        - name: chiefProfessor
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of courses
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create Course
      description: |
        Register a `Course` to the system by supplying its `code`, `title`, `theme`, `deputyProfessors`. The current authenticated user will be the `chiefProfessor`, who must have the required authority. A created course will be returned whose `experts` and `students` remain unspecified.

        Possible Client-side Exceptions:
          * Invalid arguments
          * `courseID` clash
          * No authority
            * user is not a professor
      operationId: createCourse
      tags:
        - courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
      responses:
        '201':
          description: The created course
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/courses/{courseID}':
    get:
      summary: Course Detail
      operationId: getCourseById
      description: Information for a specific course
      tags:
        - courses
      parameters:
        - name: courseID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /classes:
    get:
      summary: List Classes
      operationId: listClasses
      description: List classes according to the given query
      tags:
        - classes
      parameters:
        - name: courseID
          in: query
          description: top level courseID
          required: false
          schema:
            type: string
        - name: chiefProfessor
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create class
      description: |
        Register a `Class` under the the given `Course` by supplying `courseID` and `componentCode`. Return the created `Class`, `students` and `experts`not specified.

        Exceptions:
          * Course not found
          * No authority to register class:
            * Not a professor
            * The given course is not managed by the current user
      operationId: createClass
      tags:
        - classes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '201':
          description: The created class (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/classes/{classID}':
    get:
      summary: Class Detail
      operationId: getClassById
      description: Information for a specific class
      tags:
        - classes
      parameters:
        - name: classID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Update Class
      operationId: updateClass
      description: |
        Possible updates:
         1. Account linking by passing in `students`, `experts` and `chiefProfessor`. This change is **propagated** to the parent `Course` of this `Class`.
      tags:
        - classes
      parameters:
        - name: classID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                componentCode:
                  type: string
                chiefProfessor:
                  type: string
                experts:
                  type: array
                  items:
                    type: string
                students:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: The updated `Class`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /groups:
    post:
      summary: Create Group
      operationId: createGroup
      tags:
        - groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: The created Group
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /projects:
    post:
      summary: Create Project
      operationId: createProject
      description: |
        Register a project under the given course by supplying `courseID`, `title` and `description`. Return the created project.

        This operation SHOULD only be carried out after the professor has properly linked students and experts to a course(class), so that in the backend the participation information can be properly propagated to the created project.

        Exceptions:
          * No authority
          * Course not found
          * Invalid arguments
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: The created project (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /project-records:
    get:
      summary: List Project Records
      operationId: listProjectRecords
      description: |
        List project records according to the given query. Notice that only `groupID` is fetched (without `groupName`, which needs another query).
      tags:
        - projects
      parameters:
        - name: projectID
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of project records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Batch Grade Project
      operationId: gradeProjectInBatch
      description: |
        Grade projects in batch. The `grader` is the current user. Only `chiefProfessor` of the course and a `ProjectRecord`'s industry supervisor can grade a project.
      tags:
        - projects
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: projectRecordGradingInBatch
              type: object
              required:
                - gradedRecords
              properties:
                gradedRecords:
                  type: array
                  items:
                    type: object
                    required:
                      - projectRecordID
                      - grade
                    properties:
                      projectRecordID:
                        type: string
                      grade:
                        type: string
      responses:
        '200':
          description: a list of graded `ProjectRecord`s
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProjectRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/project-record/{projectRecordID}':
    get:
      summary: Project Record Detail
      operationId: getProjectRecordByID
      description: Information for a specific project record
      tags:
        - projects
      parameters:
        - name: projectRecordID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: the `ProjectRecord`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Grade Project
      operationId: gradeProject
      description: |
        Grade a single project record. The `grader` is the current user. Only `chiefProfessor` of the course and a `ProjectRecord`'s industry supervisor can grade a project.
      tags:
        - projects
      parameters:
        - name: projectRecordID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: projectRecordGradingPatch
              type: object
              required:
                - grade
              properties:
                grade:
                  type: string
      responses:
        '200':
          description: the graded `ProjectRecord`
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /quizzes:
    get:
      summary: List Quizzes
      operationId: listQuizzes
      description: List quizzes according to the given query
      tags:
        - quizzes
      parameters:
        - $ref: '#/paths/~1classes/get/parameters/0'
      responses:
        '200':
          description: An array of quizzes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create Quiz
      operationId: createQuiz
      description: |
        Register a quiz under the given course by supplying `courseID`, `title` and `description`. Return the created quiz.

        This operation SHOULD only be carried out after the professor has properly linked students and experts to a course(class), so that in the backend the participation information can be properly propagated to the created quiz.

        This call also automatically creates all "record"s for every student in this course.

        Exceptions:
          * No authority
          * Course not found
          * Invalid arguments
      tags:
        - quizzes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Quiz'
      responses:
        '201':
          description: The created quiz (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/quizzes/{quizID}':
    get:
      summary: Quiz Detail
      operationId: getQuizById
      description: Information for a specific quiz
      tags:
        - quizzes
      parameters:
        - name: quizID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /quiz-records/:
    get:
      summary: List Quiz Records
      operationId: listQuizRecords
      description: List quiz records according to the given query
      tags:
        - quizzes
      parameters:
        - name: quizID
          in: query
          required: false
          schema:
            type: string
        - name: student
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: An array of quiz records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/quiz-records/{quizRecordID}':
    get:
      summary: Quiz Record Detail
      operationId: getQuizRecordByID
      description: Information for a specific quiz record
      tags:
        - quizzes
      parameters:
        - name: quizRecordID
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
    patch:
      summary: Grade Quiz
      operationId: gradeQuiz
      description: Grade a single quiz record
      tags:
        - quizzes
      parameters:
        - name: quizRecordID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: QuizRecordGradingPatch
              type: object
              required:
                - grader
                - grade
              properties:
                grader:
                  type: string
                grade:
                  type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizRecord'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /reports/:
    post:
      summary: Create Report
      operationId: createReport
      description: |
        Register a quiz under the given course by supplying `courseID`, `title` and `description`. Return the created report.

        This operation SHOULD only be carried out after the professor has properly linked students and experts to a course(class), so that in the backend the participation information can be properly propagated to the created report.

        This call also automatically creates all "record"s for every student in this course.

        Exceptions:
          * No authority
          * Course not found
          * Invalid arguments
      tags:
        - reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Report'
      responses:
        '201':
          description: The created reprot (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Report'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /milestone/:
    post:
      summary: Create Milestone
      operationId: createMilestone
      description: Create a milestone
      tags:
        - milestones
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Milestone'
      responses:
        '201':
          description: The created milestone (fully populated)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
        default:
          $ref: '#/components/responses/UnexpectedError'
  /test/public:
    get:
      summary: Ping Public
      operationId: pingPublic
      description: Testing connection by pinging a *public* endpoint.
      tags:
        - test
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Successfully accessed public endpoint
  /test/private:
    get:
      summary: Ping Private
      operationId: pingPrivate
      description: Testing connection by pinging a *private* endpoint.
      tags:
        - test
      responses:
        '200':
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: Successfully accessed private endpoint
        '401':
          description: Authentication information is missing or invalid
          headers:
            WWW_Authenticate:
              schema:
                type: string
      security:
        - basicAuth: []
  /pets:
    get:
      summary: List
      operationId: listPets
      description: List all pets
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/limit'
      responses:
        '200':
          description: A paged array of pets
          headers:
            x-next:
              description: A link to the next page of responses
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - name
                properties:
                  id:
                    type: integer
                    format: int64
                  name:
                    type: string
                  tag:
                    type: string
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      summary: Create
      operationId: createPets
      description: Create a pet
      tags:
        - pets
      responses:
        '201':
          $ref: '#/components/responses/NullResponse'
        default:
          $ref: '#/components/responses/UnexpectedError'
  '/pets/{petId}':
    get:
      summary: Detail
      operationId: showPetById
      description: Info for a specific pet
      tags:
        - pets
      parameters:
        - $ref: '#/components/parameters/petId'
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: '#/paths/~1pets/get/responses/200/content/application~1json/schema'
        default:
          $ref: '#/components/responses/UnexpectedError'
components:
  parameters:
    petId:
      name: petId
      in: path
      required: true
      description: The id of the pet to retrieve
      schema:
        type: string
    limit:
      name: limit
      in: query
      description: How many items to return at one time (max 100)
      required: false
      schema:
        type: integer
        format: int32
  schemas:
    Course:
      title: Course
      description: A TCPC Course
      type: object
      required:
        - code
        - title
        - theme
        - deputyProfessors
      properties:
        ID:
          description: 'Unique identifier of a course across the platform. It is derived from the supplied `code` and `theme`. Later, `year` may also be incorporated.'
          type: string
        code:
          description: 'The subject code. For Capstone Course in AF, this is AF4912.'
          type: string
        title:
          description: 'The subject title, normally "Capstone Project Course"'
          type: string
        theme:
          description: Course theme
          type: string
        chiefProfessor:
          description: The user (professor who manages this course)
          type: string
        deputyProfessors:
          description: Other professors than the `chiefProfessor` teaching this course
          type: array
          items:
            type: string
        experts:
          description: The industry experts sponsoring this course
          type: array
          items:
            type: string
        students:
          description: The students taking this course
          type: array
          items:
            type: string
      example:
        ID: AF4912BFBD
        code: AF4912
        title: Capstone Project Course
        theme: Blockchain for Business Digitization
        chiefProfessor: brian
        deputyProfessors:
          - brian
          - jimmy
        experts:
          - peter
          - stanley
        students:
          - alice
          - bob
          - charlie
    Class:
      title: Class
      description: A class under a TCPC course
      type: object
      required:
        - courseID
        - componentCode
      properties:
        courseID:
          description: The ID of the TCPC course this class is under
          type: string
        ID:
          description: 'Unique identifier of a class. This property is **deduced** by combing the `courseID`, `componentCode`'
          type: string
        componentCode:
          description: 'The component code of a class, same as the system in e-student.'
          type: string
        chiefProfessor:
          description: The professor managing this class. Should be the same as the `chiefProfessor` from the parent `Course`
          type: string
        experts:
          description: The industry experts assigned to this class
          type: array
          items:
            type: string
        students:
          description: The students assigned to this class
          type: array
          items:
            type: string
      example:
        courseID: AF4912BFBD
        ID: AF4912BFBD-SEM001
        componentCode: SEM001
        chiefProfessor: brian
        experts:
          - stanley
          - peter
        students:
          - alice
          - bob
    Group:
      title: Group
      description: A group in a TCPC course
      type: object
      required:
        - courseID
        - name
        - notes
        - expert
        - students
      properties:
        courseID:
          description: The TCPC course this group is under
          type: string
        ID:
          description: Unique identifier of a group
          type: string
        name:
          description: Custom group name
          type: string
        notes:
          description: Miscellaneous information about the group
          type: string
        chiefProfessor:
          description: The professor managing this group
          type: string
        expert:
          description: The industry expert assigned to this group
          type: string
        students:
          description: The students assigned to this group
          type: array
          items:
            type: string
    Project:
      title: Project
      description: A project in a TCPC course
      type: object
      required:
        - courseID
        - title
        - description
      properties:
        courseID:
          description: The ID of the TCPC course this project is under
          type: string
        ID:
          description: 'Unique identifier of a project, derived from `courseID`.'
          type: string
        title:
          description: Project title
          type: string
        description:
          description: A short description of this project
          type: string
        chiefProfessor:
          description: The professor managing this class. Should be the same as the `chiefProfessor` from the parent `Course`.
          type: string
      example:
        courseID: AF4912BFBD
        ID: AF4912BFBD-P1
        title: Blockchain Application for Small/Medium businesses
        description: Students are expected to form a group and come up with ideas for business transformation by the Blockchain Technology.
        chiefProfessor: brian
    ProjectRecord:
      title: ProjectRecord
      description: |
        A record for a TCPC project. A record is instantiated for every group for every project. A project is graded on a group basis. Grades (`gradeByProfessor`, `gradeByExpert`) will be `null` if not present.
      type: object
      required:
        - projectID
        - groupID
      properties:
        projectID:
          type: string
        groupID:
          type: string
        ID:
          type: string
        gradeByProfessor:
          type: string
        gradeByExpert:
          type: string
        chiefProfessor:
          type: string
        expert:
          type: string
        students:
          type: array
          items:
            type: string
    Quiz:
      title: Quiz
      description: A quiz in a TCPC course
      type: object
      required:
        - courseID
        - title
        - description
      properties:
        courseID:
          description: The ID of the TCPC course this quiz is under
          type: string
        ID:
          description: 'Unique identifier of a quiz, derived from `courseID`.'
          type: string
        title:
          description: Quiz title
          type: string
        description:
          description: A short description of this quiz
          type: string
        chiefProfessor:
          description: The professor managing this class. Should be the same as the `chiefProfessor` from the parent `Course`.
          type: string
      example:
        courseID: AF4912BFBD
        ID: AF4912BFBD-Q1
        title: Quiz 1
        description: First Quiz
        chiefProfessor: brian
    QuizRecord:
      title: QuizRecord
      description: Graded record for a quiz
      type: object
      properties:
        ID:
          type: string
          description: This ID is for system book-keeping and not used directly by the end users.
        quizID:
          type: string
        grader:
          type: string
        student:
          type: string
        grade:
          type: string
      example:
        ID: F9E52CBC-AC07-4B06-ABF9-46EE0C9F3EE1
        quizID: AF4912BFBDQ1
        grader: brian
        student: alice
        grade: A+
    Report:
      title: Report
      description: A Report in a TCPC course
      type: object
      required:
        - courseID
        - title
        - description
      properties:
        courseID:
          description: The ID of the TCPC course this report is under
          type: string
        ID:
          description: 'Unique identifier of a project, derived from `courseID`.'
          type: string
        title:
          description: Report title
          type: string
        description:
          description: A short description of this report
          type: string
        chiefProfessor:
          description: The professor managing this class. Should be the same as the `chiefProfessor` from the parent `Course`.
          type: string
      example:
        courseID: AF4912BFBD
        ID: AF4912BFBD-R1
        title: Report 1
        description: First Report
        chiefProfessor: brian
    ReportRecord:
      title: ReportRecord
      description: Graded and uploaded record for a report
      type: object
      properties:
        reportID:
          type: string
        sha256Checksum:
          type: string
        chiefProfessor:
          type: string
        student:
          type: string
        grade:
          type: string
    Milestone:
      title: Milestone
      description: A milestone in a TCPC course
      type: object
      required:
        - courseID
        - title
        - description
        - chiefProfessor
      properties:
        courseID:
          description: The ID of the TCPC course this milestone is under
          type: string
        ID:
          description: 'Unique identifier of a milestone, derived from `courseID`.'
          type: string
        title:
          description: Milestone title
          type: string
        description:
          description: A short description of this milestone
          type: string
        chiefProfessor:
          description: The professor managing this class. Should be the same as the `chiefProfessor` from the parent `Course`.
          type: string
        students:
          description: 'The students assigned to this milestone, inherited from the course'
          type: array
          items:
            type: string
      example:
        courseID: AF4912BFBD
        ID: AF4912BFBD-M1
        title: Milestone 1
        description: First Milestone
        chiefProfessor: brian
        students:
          - alice
          - bob
  responses:
    UnexpectedError:
      description: Erroneous condition
      content:
        application/json:
          schema:
            type: object
            required:
              - status
              - code
              - message
            properties:
              status:
                description: HTTP response status
                type: integer
                format: int32
              code:
                description: a application-defined error code
                type: integer
                format: int32
              message:
                description: 'detailed error information, suitable to be displayed to user'
                type: string
            example:
              status: 422
              code: 179
              message: Object with id 'AF4912' already exists.
    NullResponse:
      description: Null response
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
